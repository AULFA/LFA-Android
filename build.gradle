import java.security.MessageDigest

buildscript {
  if ("$gradle.gradleVersion" != "6.5") {
    throw new GradleException("Gradle version 6.5 is required (received $gradle.gradleVersion)")
  }

  ext.kotlin_version = "1.4.10"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.2.0"
    classpath "digital.wup:android-maven-publish:3.6.3"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.android.tools.build:gradle:4.1.0'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.27.0"
  id "digital.wup.android-maven-publish" version "3.6.3"
  id "ru.vyarus.animalsniffer" version "1.5.0"
}

ext {
  androidBuildToolsVersion = "29.0.3"
  androidCompileSDKVersion = 29
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 29

  if (!project.hasProperty("nexusUsername")) {
    logger.warn("No nexusUsername property specified: Using an empty value")
    nexusUsername = ""
  }
  if (!project.hasProperty("nexusPassword")) {
    logger.warn("No nexusPassword property specified: Using an empty value")
    nexusPassword = ""
  }

  simplifiedVersion = "6.3.2-SNAPSHOT"
}

static def sha256Of(File file) {
  MessageDigest digest = MessageDigest.getInstance("SHA-256")
  digest.update(file.getBytes())
  return digest.digest().encodeHex().toString()
}

task preFlightChecks {
  logger.info("running pre-flight checks")

  def keystoreHash = "20dfb53906594f4ae7a77df3d92f87f1c003c6a824b0b541c23c3185fd603da8"
  def analyticsHash = "9adef6a15025a9e93cfd636b778251f430af6b97caeb90f86bf89e83f038fc90"
  def credsHash = "bef63576bb03a945b463a39e9ffb1a8a5067899b86d7be62c44292e744f804ac"

  def requiredFiles = [:]
  requiredFiles["lfa-keystore.jks"] = keystoreHash
  requiredFiles["one.lfa.android.app.grande/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.grande/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.laos.online/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.laos.online/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.laos/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.laos/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.online/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.online/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.png_offline/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.timor/src/main/assets/lfaAnalytics.xml"] = analyticsHash

  def missingFiles = []
  for (entry in requiredFiles) {
    logger.info("Checking ${entry.key} exists and has expected digest value")

    try {
      def received = sha256Of(file(entry.key))
      def expected = entry.value
      if (received != expected) {
        logger.error("ERROR: File ${entry.key} has incorrect SHA-256 hash")
        logger.error("  Expected: ${expected}")
        logger.error("  Received: ${received}")
        missingFiles.add(entry.key)
      }
    } catch (Exception e) {
      logger.error("ERROR: Could not open required file ${entry.key}: ${e.getClass()}: ${e.getMessage()}")
      missingFiles.add(entry.key)
    }
  }

  if (!missingFiles.isEmpty()) {
    throw new FileNotFoundException("One or more required files are missing or have incorrect contents.")
  }
}

subprojects {
  //
  // We currently have transitive dependencies that specify dependencies on newer versions
  // of SLF4J. These are subtly incompatible with Logback-Android, and it will be a while before
  // new versions appear of both artifacts. Remove this when both are updated!
  //
  configurations.all {
    resolutionStrategy.force libraries.slf4j
  }
}

ext.libraries = [
  apacheCSV                          : "org.apache.commons:commons-csv:1.8",
  androidXWorkManager                : "androidx.work:work-runtime-ktx:2.2.0",
  googleAutoValue                    : "com.google.auto.value:auto-value:1.5",
  irradiaDatePicker                  : "one.irradia.datepicker:one.irradia.datepicker.views:1.0.0",
  junit                              : "junit:junit:4.12",
  kotlinStdlib                       : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
  logbackClassic                     : "ch.qos.logback:logback-classic:1.2.3",
  mockitoAndroid                     : "org.mockito:mockito-android:2.22.0",
  nyplSimplifiedAnalyticsAPI         : "org.librarysimplified:org.librarysimplified.analytics.api:${simplifiedVersion}",
  nyplSimplifiedBootAPI              : "org.librarysimplified:org.librarysimplified.boot.api:${simplifiedVersion}",
  nyplSimplifiedBuildConfig          : "org.librarysimplified:org.librarysimplified.buildconfig.api:${simplifiedVersion}",
  nyplSimplifiedFiles                : "org.librarysimplified:org.librarysimplified.files:${simplifiedVersion}",
  nyplSimplifiedFutures              : "org.librarysimplified:org.librarysimplified.futures:${simplifiedVersion}",
  nyplSimplifiedMain                 : "org.librarysimplified:org.librarysimplified.main:${simplifiedVersion}",
  nyplSimplifiedNavigationAPI        : "org.librarysimplified:org.librarysimplified.ui.navigation.api:${simplifiedVersion}",
  nyplSimplifiedProfilesAPI          : "org.librarysimplified:org.librarysimplified.profiles.api:${simplifiedVersion}",
  nyplSimplifiedProfilesControllerAPI: "org.librarysimplified:org.librarysimplified.profiles.controller.api:${simplifiedVersion}",
  nyplSimplifiedServicesAPI          : "org.librarysimplified:org.librarysimplified.services.api:${simplifiedVersion}",
  nyplSimplifiedSourceFileBased      : "org.librarysimplified:org.librarysimplified.accounts.source.filebased:${simplifiedVersion}",
  nyplSimplifiedThreads              : "org.librarysimplified:org.librarysimplified.threads:${simplifiedVersion}",
  nyplSimplifiedUIBranding           : "org.librarysimplified:org.librarysimplified.ui.branding:${simplifiedVersion}",
  nyplSimplifiedUICatalog            : "org.librarysimplified:org.librarysimplified.ui.catalog:${simplifiedVersion}",
  nyplSimplifiedUIProfiles           : "org.librarysimplified:org.librarysimplified.ui.profiles:${simplifiedVersion}",
  nyplSimplifiedUISettings           : "org.librarysimplified:org.librarysimplified.ui.settings:${simplifiedVersion}",
  nyplSimplifiedUITheme              : "org.librarysimplified:org.librarysimplified.ui.theme:${simplifiedVersion}",
  nyplSimplifiedUIThreadAPI          : "org.librarysimplified:org.librarysimplified.ui.thread.api:${simplifiedVersion}",
  nyplSourceSPI                      : "org.librarysimplified:org.librarysimplified.accounts.source.spi:${simplifiedVersion}",
  slf4j                              : "org.slf4j:slf4j-api:1.7.25",
]

allprojects {
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]
}

subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        dexOptions {
          javaMaxHeapSize "3g"
        }
        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
          jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        dexOptions {
          javaMaxHeapSize "3g"
        }
        defaultConfig {
          multiDexEnabled true
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          useLibrary 'org.apache.http.legacy'
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
          jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'
          animationsDisabled = true
        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  apply plugin: "digital.wup.android-maven-publish"
  apply plugin: "signing"

  publishing {
    publications {
      basicJar(MavenPublication) {

        switch (POM_PACKAGING) {
          case "jar":
            from components.java
            break

          case "apk":
            break

          case "aar":
            from components.android
            break
        }

        artifact sourcesJar
        artifact javadocsJar

        pom {
          artifactId = POM_ARTIFACT_ID
          name = POM_NAME
          packaging = POM_PACKAGING
          description = POM_DESCRIPTION
          url = POM_URL

          scm {
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url = POM_SCM_URL
          }

          licenses {
            license {
              name = POM_LICENCE_NAME
              url = POM_LICENCE_URL
            }
          }

          developers {
            developer {
              id = "io7m"
              name = "Mark Raynsford"
              email = "code@io7m.com"
              url = "https://www.io7m.com"
            }
            developer {
              id = "winniequinn"
              name = "Winnie Quinn"
              url = "https://www.winniequinn.com/"
            }
            developer {
              id = "gioneill"
              name = "Greg O'Neill"
              url = "https://github.com/gioneill"
            }
            developer {
              id = "mattniehoff"
              name = "Matt Niehoff"
              url = "https://github.com/mattniehoff"
            }
            developer {
              id = "MalcolmMcFly"
              name = "Malcolm Woods"
              url = "https://github.com/MalcolmMcFly"
            }
          }
        }
      }
    }

    repositories {
      maven {
        def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl

        credentials(PasswordCredentials) {
          username nexusUsername
          password nexusPassword
        }
      }
    }
  }

  signing {
    useGpgCmd()
    sign publishing.publications.basicJar
  }

  repositories {
    mavenLocal()
    mavenCentral()

    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    maven { url "https://jitpack.io" }
    jcenter()
    google()
  }
}

