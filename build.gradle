import java.security.MessageDigest

buildscript {
  if ("$gradle.gradleVersion" != "6.7") {
    throw new GradleException("Gradle version 6.7 is required (received $gradle.gradleVersion)")
  }

  ext.kotlin_version = "1.4.20"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.2.0"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.android.tools.build:gradle:4.1.2'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.36.0"
  id "ru.vyarus.animalsniffer" version "1.5.0"
}

ext {
  androidBuildToolsVersion = "29.0.3"
  androidCompileSDKVersion = 29
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 30
}

static def sha256Of(File file) {
  MessageDigest digest = MessageDigest.getInstance("SHA-256")
  digest.update(file.getBytes())
  return digest.digest().encodeHex().toString()
}

task preFlightChecks {
  logger.info("running pre-flight checks")

  def keystoreHash = "df23e1d756802f420a8add6d6104848a4ae110d5de946267cccb9ea8b2e892dd"
  def analyticsHash = "917e2f8e6344d49824e913257a824011877008a510e35424f5b38814981ce14c"
  def credsHash = "f434c8a49756e100ab858ef25f3401adbfd173b4a492243a871e2f0d0183dc5e"

  def requiredFiles = [:]
  requiredFiles["lfa-keystore.jks"] = keystoreHash
  requiredFiles["one.lfa.android.app.bhutan.online/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.ethiopia/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.grande/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.grande/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.indigenous/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.kenya/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.laos.online/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.laos/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.laos/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.myanmar/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.myanmar.online/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.online/src/main/assets/account_bundled_credentials.json"] = credsHash
  requiredFiles["one.lfa.android.app.png_offline/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.solomon/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.timor/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.vietnam/src/main/assets/lfaAnalytics.xml"] = analyticsHash
  requiredFiles["one.lfa.android.app.vietnam.online/src/main/assets/account_bundled_credentials.json"] = credsHash

  def missingFiles = []
  for (entry in requiredFiles) {
    logger.info("Checking ${entry.key} exists and has expected digest value")

    try {
      def received = sha256Of(file(entry.key))
      def expected = entry.value
      if (received != expected) {
        logger.error("ERROR: File ${entry.key} has incorrect SHA-256 hash")
        logger.error("  Expected: ${expected}")
        logger.error("  Received: ${received}")
        missingFiles.add(entry.key)
      }
    } catch (Exception e) {
      logger.error("ERROR: Could not open required file ${entry.key}: ${e.getClass()}: ${e.getMessage()}")
      missingFiles.add(entry.key)
    }
  }

  if (!missingFiles.isEmpty()) {
    throw new FileNotFoundException("One or more required files are missing or have incorrect contents.")
  }
}

ext.versions = [
  logback_android: '2.0.0',
  logback_classic: '1.2.3',
  slf4j          : '1.7.25',
  simplified     : '6.6.2-SNAPSHOT',
]

ext.libraries = [
  apache_csv                     : "org.apache.commons:commons-csv:1.8",
  androidx_work_manager          : "androidx.work:work-runtime-ktx:2.2.0",
  google_auto_value              : "com.google.auto.value:auto-value:1.5",
  irradia_date_picker            : "one.irradia.datepicker:one.irradia.datepicker.views:1.0.0",
  junit                          : "junit:junit:4.12",
  kotlin_stdlib                  : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
  kotlin_reflect                 : "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}",
  logback_android                : "com.github.tony19:logback-android:${versions.logback_android}",
  logback_classic                : "ch.qos.logback:logback-classic:${versions.logback_classic}",
  mockito_android                : "org.mockito:mockito-android:2.22.0",
  okhttp3_mockwebserver          : "com.squareup.okhttp3:mockwebserver:4.8.1",
  slf4j                          : "org.slf4j:slf4j-api:${versions.slf4j}",
  simplified_main                : "org.librarysimplified:org.librarysimplified.main:${versions.simplified}",
  simplified_accounts_source_file: "org.librarysimplified:org.librarysimplified.accounts.source.filebased:${versions.simplified}",
]

allprojects {
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]
}

subprojects { project ->

  configurations.all {

    /*
     * Force all Library Simplified modules to unconditionally use the same version.
     */

    resolutionStrategy.eachDependency { details ->
      if (details.requested.group == 'org.librarysimplified') {
        switch (details.requested.name) {
          case 'org.librarysimplified.readium':
          case 'org.librarysimplified.readium.shared_js':
            break
          default:
            details.useVersion "${versions.simplified}"
            break
        }
      }
    }

    /*
     * We currently have transitive dependencies that specify dependencies on newer versions
     * of SLF4J. These are subtly incompatible with Logback-Android, and it will be a while before
     * new versions appear of both artifacts. Remove this when both are updated!
     */

    resolutionStrategy.eachDependency { details ->
      if (details.requested.group == 'org.slf4j') {
        details.useVersion "${versions.slf4j}"
      }
    }

    /*
     * one.irradia.mime.api depends on an outdated version of kotlin-reflect
     */

    resolutionStrategy.eachDependency { details ->
      if (details.requested.group == 'org.jetbrains.kotlin') {
        details.useVersion "${kotlin_version}"
      }
    }
  }

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      java {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
      }

      compileKotlin {
        kotlinOptions {
          jvmTarget = "1.8"
        }
      }

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        dexOptions {
          javaMaxHeapSize "3g"
        }
        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
          jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        dexOptions {
          javaMaxHeapSize "3g"
        }
        defaultConfig {
          multiDexEnabled true
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          useLibrary 'org.apache.http.legacy'
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
          jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'
          animationsDisabled = true
        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  repositories {
    mavenLocal()
    mavenCentral()

    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    maven { url "https://jitpack.io" }
    jcenter()
    google()
  }
}

/**
 * Empty tasks called by CI. We don't do semantic versioning analysis or linting here yet.
 */

task verifySemanticVersioning {

}

task ktlint {

}
